diff --git a/main.cpp b/main.cpp
index 5a60550..be5f3e2 100644
--- a/main.cpp
+++ b/main.cpp
@@ -1,6 +1,7 @@
 #include <iostream>
 #include <cstring>
 #include <vector>
+#include <memory>
 
 struct A {
     int* arrA = new int[10]{2};
@@ -12,34 +13,48 @@ struct B {
 
 struct C {
     int val = -1;
-    C();
-    ~C();
+    C() {}
+    ~C() {}
 };
 
-int g(A* a, B* b, int pos)
+int g(std::unique_ptr<A> a, std::unique_ptr<B> b, int pos) noexcept(false)
 {
     auto sum_pos =  a->arrA[pos] + b->arrB[pos];
     return sum_pos;
 }
 
 template <typename T>
-void insert_in_vector(std::vector<T> &vector, long long pos, T value) {
+void insert_in_vector(std::vector<T> &vector, std::size_t pos, T value) noexcept(false) {
   if (pos >= vector.size()) {
     return;
   }
-  vector[pos] = value;
+  vector.at(pos)= value;
 }
 
 int main()
 {
-    g(new A, new B, 0);
+    try
+    {
+        g(std::make_unique<A>(), std::make_unique<B>(), 0);
+    }
+    catch(const std::exception& e)
+    {
+        std::cerr << e.what() << '\n';
+    }
 
     alignas(struct C) char space_on_stack[sizeof(struct C)];
     C* c_ptr = new(&space_on_stack) C;
-    delete c_ptr; //UB
+    c_ptr->~C();
 
     std::vector<int> int_vector {1, 2, 3};
-    insert_in_vector<int>(int_vector, -1, 1);
+    try
+    {
+        insert_in_vector<int>(int_vector, -1, 1);
+    }
+    catch(const std::exception& e)
+    {
+        std::cerr << e.what() << '\n';
+    }
 
     return 0;
 }
\ No newline at end of file
