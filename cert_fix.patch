diff --git a/cert_fix.patch b/cert_fix.patch
index 307386c..e69de29 100644
--- a/cert_fix.patch
+++ b/cert_fix.patch
@@ -1,70 +0,0 @@
-diff --git a/main.cpp b/main.cpp
-index 5a60550..be5f3e2 100644
---- a/main.cpp
-+++ b/main.cpp
-@@ -1,6 +1,7 @@
- #include <iostream>
- #include <cstring>
- #include <vector>
-+#include <memory>
- 
- struct A {
-     int* arrA = new int[10]{2};
-@@ -12,34 +13,48 @@ struct B {
- 
- struct C {
-     int val = -1;
--    C();
--    ~C();
-+    C() {}
-+    ~C() {}
- };
- 
--int g(A* a, B* b, int pos)
-+int g(std::unique_ptr<A> a, std::unique_ptr<B> b, int pos) noexcept(false)
- {
-     auto sum_pos =  a->arrA[pos] + b->arrB[pos];
-     return sum_pos;
- }
- 
- template <typename T>
--void insert_in_vector(std::vector<T> &vector, long long pos, T value) {
-+void insert_in_vector(std::vector<T> &vector, std::size_t pos, T value) noexcept(false) {
-   if (pos >= vector.size()) {
-     return;
-   }
--  vector[pos] = value;
-+  vector.at(pos)= value;
- }
- 
- int main()
- {
--    g(new A, new B, 0);
-+    try
-+    {
-+        g(std::make_unique<A>(), std::make_unique<B>(), 0);
-+    }
-+    catch(const std::exception& e)
-+    {
-+        std::cerr << e.what() << '\n';
-+    }
- 
-     alignas(struct C) char space_on_stack[sizeof(struct C)];
-     C* c_ptr = new(&space_on_stack) C;
--    delete c_ptr; //UB
-+    c_ptr->~C();
- 
-     std::vector<int> int_vector {1, 2, 3};
--    insert_in_vector<int>(int_vector, -1, 1);
-+    try
-+    {
-+        insert_in_vector<int>(int_vector, -1, 1);
-+    }
-+    catch(const std::exception& e)
-+    {
-+        std::cerr << e.what() << '\n';
-+    }
- 
-     return 0;
- }
-\ No newline at end of file
diff --git a/main.cpp b/main.cpp
index 273ec34..d8810ce 100644

Autorzy patcha:

Kacper Nowak
Jakub Ziółkowski
--- a/main.cpp
+++ b/main.cpp
@@ -1,18 +1,19 @@
 #include <iostream>
 #include <cstring>
 #include <vector>
+#include <memory>
 
 struct A {
-    int* arrA;
-    A() {
+    int* arrA = nullptr; //in case of bad_alloc unknown value of arrA is passed to delete[]. Nullptr is a correct value that can be returned by new[]. Refer to MEM51-CPP.
+    A() noexcept(false) { //may throw std::bad_alloc. Marked as noexcept(false) - refer to ERR55-CPP.
         arrA = new int[10]{2};
     }
     ~A() { delete[] arrA; }
 };
 
 struct B {
-    int* arrB;
-    B() {
+    int* arrB = nullptr; //in case of bad_alloc unknown value of arrA is passed to delete[]. Nullptr is a correct value that can be returned by new[]. Refer to MEM51-CPP.
+    B() noexcept(false) { //may throw std::bad_alloc. Marked as noexcept(false) - refer to ERR55-CPP.
         arrB = new int[10000000000]{2};
     }
     ~B() { delete[] arrB; }
@@ -20,34 +21,51 @@ struct B {
 
 struct C {
     int val = -1;
-    C();
-    ~C();
+    C() {}
+    ~C() {}
 };
 
-int g(A* a, B* b, int pos)
-{
-    auto sum_pos =  a->arrA[pos] + b->arrB[pos];
-    return sum_pos;
+int g(std::unique_ptr<A> a, std::unique_ptr<B> b, std::size_t pos) noexcept(false) //prevent memory leak by using unique_ptr. Refer to MEM52-CPP.
+{ //this function may throw. Marked as noexcept(false) - refer to ERR55-CPP. Check if pos is between correct bounds. Use size_t for preventing passing negative values. Refer to CTR50-CPP.
+    if(pos < sizeof(b->arrB)/sizeof(b->arrB[0] || pos < sizeof(a->arrA)/sizeof(a->arrA[0])))
+    {
+        auto sum_pos =  a->arrA[pos] + b->arrB[pos];
+        return sum_pos;
+    }
+    return INT32_MIN;
 }
 
 template <typename T>
-void insert_in_vector(std::vector<T> &vector, long long pos, T value) {
+void insert_in_vector(std::vector<T> &vector, std::size_t pos, T value) noexcept(false) { //size_t for iterator type to prevent passing neg. values. Refer to CTR50-CPP.
   if (pos >= vector.size()) {
     return;
   }
-  vector[pos] = value;
+  vector.at(pos) = value; //vector.at() throws an exception in case of out-of-bound read. + marking this function as throwing. Refer tp ERR55-CPP.
 }
 
 int main()
 {
-    g(new A, new B, 0);
-
+    try
+    {
+        g(std::make_unique<A>(), std::make_unique<B>(), 0); //Using unique pointers to prevent memory leak in case of exception in A or B constructor. Wrapped in try-catch as this function may throw an exception.
+    } //Refer to ERR55-CPP, MEM52-CPP.
+    catch(const std::exception& e)
+    {
+        std::cerr << e.what() << '\n';
+    }
+    
     alignas(struct C) char space_on_stack[sizeof(struct C)];
     C* c_ptr = new(&space_on_stack) C;
-    delete c_ptr; //UB
-
+    c_ptr->~C(); //c_ptr is a pointer returned by placement new. The memory was allocated on the stack - we should call ~C() destructor rather than deleting() c_ptr to prevent UB.
+//Refer to MEM51-CPP.
     std::vector<int> int_vector {1, 2, 3};
-    insert_in_vector<int>(int_vector, -1, 1);
-
+    try
+    {
+        insert_in_vector<int>(int_vector, -1, 1); //Wrapped in try-catch block because insert_in_vector may throw an exception. Refer to ERR55-CPP.
+    }
+    catch(const std::exception& e)
+    {
+        std::cerr << e.what() << '\n';
+    }
     return 0;
 }
\ No newline at end of file
